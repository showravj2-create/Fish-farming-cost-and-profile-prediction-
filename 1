import streamlit as st
import numpy as np
import pandas as pd
from PIL import Image
import requests
from io import BytesIO
import calendar

# -----------------------------
# Base data (edit as you like)
# -----------------------------
USD_RATE = 120  # 1 USD ~ 120 BDT (update when needed)

# Farm-gate price guesses in Tk/kg (edit to your local prices)
fish_prices = {
    "Tilapia": 200, "Catfish": 250,
    "Catla": 260, "Rohu": 240, "Mrigal": 220,
    "Silver Carp": 200, "Grass Carp": 210, "Common Carp": 210
}

# Bangladesh 6-season multipliers by species (keep or tweak)
season_price_multiplier = {
    s: {'Summer':1.05,'Rainy':1.08,'Autumn':1.10,'Late Autumn':1.00,'Winter':1.15,'Spring':1.05}
    for s in fish_prices.keys()
}
# Optionally fine-tune a few:
season_price_multiplier["Catla"]["Summer"] = 1.00
season_price_multiplier["Tilapia"]["Late Autumn"] = 0.95

# Image URLs
fish_images = {
    "Tilapia":"https://upload.wikimedia.org/wikipedia/commons/7/71/Tilapia_zillii.jpg",
    "Catfish":"https://upload.wikimedia.org/wikipedia/commons/2/2d/Clarias_gariepinus_01.jpg",
    "Catla":"https://upload.wikimedia.org/wikipedia/commons/3/3f/Catla_catla.jpg",
    "Rohu":"https://upload.wikimedia.org/wikipedia/commons/1/1a/Labeo_rohita.png",
    "Mrigal":"https://upload.wikimedia.org/wikipedia/commons/4/49/Cirrhinus_mrigala.jpg",
    "Silver Carp":"https://upload.wikimedia.org/wikipedia/commons/7/73/Hypophthalmichthys_molitrix_Prague_Vltava_1.jpg",
    "Grass Carp":"https://upload.wikimedia.org/wikipedia/commons/0/0b/Ctenopharyngodon_idella.jpeg",
    "Common Carp":"https://upload.wikimedia.org/wikipedia/commons/4/43/Common_carp.jpg",
}

# Month -> Bangladesh season
def month_to_season(m):
    if m in (4,5): return "Summer"
    if m in (6,7): return "Rainy"
    if m in (8,9): return "Autumn"
    if m in (10,11): return "Late Autumn"
    if m in (12,1): return "Winter"
    if m in (2,3): return "Spring"

# -----------------------------
# Polyculture combo presets
# -----------------------------
# Ratios sum to anything; we‚Äôll normalize to 1.0
combo_presets = {
    "IMC Trio (Catla:Rohu:Mrigal = 1:1:1)":
        {"Catla":1, "Rohu":1, "Mrigal":1},
    "IMC + Silver (Rohu:Catla:Mrigal:Silver = 2:1:2:1)":
        {"Rohu":2, "Catla":1, "Mrigal":2, "Silver Carp":1},  # Field study uses 2:1:2:1
    "Six-species (Catla,Rohu,Mrigal,Grass,Silver,Common)":
        {"Catla":1.5, "Rohu":1.5, "Mrigal":1.5, "Grass Carp":0.5, "Silver Carp":1, "Common Carp":1}
}

# -----------------------------
# Core simulation
# -----------------------------
def simulate_one_month(species, season, stock_units, buy_cost_fish, feed_cost, other_cost):
    """species: str; stock_units ~ 'pond size' units allocated to this species in the combo."""
    # yield (kg) ~ 0.1 * units * random growth; adjust slightly by species
    spp_factor = {
        "Catla":1.05, "Rohu":1.00, "Mrigal":0.95,
        "Silver Carp":1.00, "Grass Carp":0.98, "Common Carp":0.98,
        "Tilapia":1.10, "Catfish":1.08
    }.get(species, 1.0)
    growth = np.random.uniform(0.90, 1.15)
    yield_kg = max(0, stock_units * 0.1 * growth * spp_factor)

    # selling price (Tk/kg)
    sp_tk = round(fish_prices[species] * season_price_multiplier[species][season], 2)
    revenue_tk = yield_kg * sp_tk

    # costs: feed + other are per combo (shared); buy_cost_fish is per "unit" here
    # You can refine this if you track seed/fingerling prices separately by species.
    total_cost_tk = feed_cost + other_cost + (buy_cost_fish * stock_units * 0.02)  # small seed cost share

    profit_tk = revenue_tk - total_cost_tk
    return dict(yield_kg=yield_kg, price_tk=sp_tk, revenue_tk=revenue_tk, profit_tk=profit_tk)

def simulate_combo_year(combo_dict, pond_units, buy_cost_fish, feed_cost, other_cost):
    """Returns per-month DataFrame and total profit for the whole year and combo."""
    # Normalize ratios
    total_ratio = sum(combo_dict.values())
    shares = {k: v/total_ratio for k,v in combo_dict.items()}

    rows = []
    for m in range(1,13):
        season = month_to_season(m)
        month_name = calendar.month_name[m]
        # split pond among species by share
        for species, frac in shares.items():
            units = pond_units * frac
            res = simulate_one_month(species, season, units, buy_cost_fish, feed_cost, other_cost)
            rows.append({
                "Month": month_name, "Season": season, "Species": species,
                "Units": round(units,2), "Yield (Kg)": round(res["yield_kg"],1),
                "Sell (Tk/kg)": res["price_tk"],
                "Revenue (Tk)": round(res["revenue_tk"],1),
                "Profit (Tk)": round(res["profit_tk"],1),
                "Image": fish_images.get(species,"")
            })
    df = pd.DataFrame(rows)
    total_profit = df["Profit (Tk)"].sum()
    return df, total_profit

# -----------------------------
# UI
# -----------------------------
st.title("üêü Polyculture Profit Simulator (Bangladesh)")

# Inputs (shared across simulations)
pond_units = st.number_input("Pond production units (relative size)", 100, 5000, 1200, step=50)
buy_cost_fish = st.number_input("Buying cost (seed/fingerling & miscellaneous) per unit (Tk)", 0, 2000, 200, step=10)
feed_cost = st.number_input("Monthly feed budget (Tk)", 0, 200000, 12000, step=500)
other_cost = st.number_input("Monthly other costs (Tk)", 0, 100000, 4000, step=500)

# Choose combos to test
chosen_presets = st.multiselect(
    "Choose combo presets to compare",
    list(combo_presets.keys()),
    default=list(combo_presets.keys())[:2]
)

# Optional: build your own combo
st.markdown("**Or create your own combo** (set weights; we normalize them automatically):")
custom_species = st.multiselect("Species for custom combo", list(fish_prices.keys()), default=["Catla","Rohu","Mrigal"])
weights = {}
cols = st.columns(len(custom_species) if custom_species else 1)
for i, sp in enumerate(custom_species):
    with cols[i]:
        weights[sp] = st.number_input(f"{sp} weight", 0.0, 10.0, 1.0, 0.1)

run = st.button("Simulate")

if run:
    results = []
    # Presets
    for name in chosen_presets:
        df_combo, tot_profit = simulate_combo_year(combo_presets[name], pond_units, buy_cost_fish, feed_cost, other_cost)
        results.append((name, df_combo, tot_profit))
    # Custom
    if weights:
        df_combo, tot_profit = simulate_combo_year(weights, pond_units, buy_cost_fish, feed_cost, other_cost)
        results.append(("Custom Combo", df_combo, tot_profit))

    # Rank by profit
    results.sort(key=lambda x: x[2], reverse=True)

    st.subheader("üèÜ Combo ranking by total yearly profit (Tk)")
    rank_table = pd.DataFrame([{"Combo": name, "Total Profit (Tk)": round(tot,1)} for name,_,tot in results])
    st.dataframe(rank_table)

    # Show top combo details
    best_name, best_df, best_profit = results[0]
    st.subheader(f"üìä Best Combo: {best_name} ‚Äî Total Profit: {round(best_profit,1)} Tk")
    st.dataframe(best_df)

    # Profit trend (sum across species by month)
    month_profit = best_df.groupby("Month")["Profit (Tk)"].sum().reindex(calendar.month_name[1:13])
    st.line_chart(month_profit)

    # Species images for the best combo
    st.subheader("üê† Species in best combo")
    spp = list(best_df["Species"].unique())
    cols = st.columns(len(spp))
    for i, sp in enumerate(spp):
        cols[i].markdown(f"**{sp}**")
        url = fish_images.get(sp, "")
        if url:
            try:
                r = requests.get(url, timeout=10)
                img = Image.open(BytesIO(r.content))
                cols[i].image(img, width=150)
            except:
                cols[i].write("Image not available")
